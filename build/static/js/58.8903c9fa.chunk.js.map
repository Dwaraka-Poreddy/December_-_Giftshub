{"version":3,"sources":["LivePages/LiveSlidePuzzle.js","Images/navbar-logo.svg","NavBars/LiveNavBar.js"],"names":["LiveAnimatedFramePage","match","useState","fbimg","setfbimg","loading","setloading","bestscore","setbestscore","setpuzzlescore","useEffect","a","firebase","database","ref","params","slug","once","then","snapshot","img","val","url","best_score","style","backgroundColor","class","type","color","height","width","display","justifyContent","margin","handlepuzzlescore","e","todoRef","child","todo","update","toast","success","alignItems","module","exports","LiveNavBar","navstate","setnavstate","window","addEventListener","changeBackground","scrollY","id","href","src","require","alt","data-toggle","data-target","aria-controls","aria-expanded","aria-label"],"mappings":"uQAuGeA,UA/Ff,UAA+B,MAAEC,IAAU,IAAD,EACdC,mBAAS,IADK,mBACjCC,EADiC,KAC1BC,EAD0B,OAEVF,oBAAS,GAFC,mBAEjCG,EAFiC,KAExBC,EAFwB,OAGNJ,qBAHM,mBAGjCK,EAHiC,KAGtBC,EAHsB,OAIFN,mBAAS,GAJP,mBAIpBO,GAJoB,WAqCxC,OAhBAC,oBAAS,sBAAC,sBAAAC,EAAA,6DACRL,GAAW,GADH,SAEcM,IACnBC,WACAC,IAAI,gBAAkBb,EAAMc,OAAOC,MACnCC,KAAK,SACLC,KAAMC,IACL,IAAIC,EAAMD,EAASE,MAAMC,IACzBlB,EAASgB,GACT,IAAIb,EAAYY,EAASE,MAAME,WAC/Bf,EAAaD,KAVT,cAaRD,GAAW,GAbH,2CAcP,IAGD,yBAAKkB,MAAO,CAAEC,gBAAiB,YAC7B,kBAAC,IAAD,MACA,6BACA,6BACA,6BACA,yBAAKC,MAAM,wBACRrB,EACC,kBAAC,IAAD,CACEsB,KAAK,eACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,MAGT,gCACgB,KAAbvB,GACC,gCACE,2CAAiBA,IAGrB,yBAAKmB,MAAM,OACT,yBAAKA,MAAM,iCACR,IACD,yBACEF,MAAO,CACLO,QAAS,OACTC,eAAgB,SAChBC,OAAQ,SAGV,kBAAC,IAAD,CACEC,kBAhESC,IAEzB,GADA1B,EAAe0B,GACXA,EAAI5B,EAAW,CACjB,IAAM6B,EAAUxB,IACbC,WACAC,IAAI,eACJuB,MAAMpC,EAAMc,OAAOC,MAChBsB,EAAO,CACXhB,IAAKnB,EACLoB,WAAYY,GAEDC,EAAQG,OAAOD,GAC5B9B,EAAa2B,GACbK,IAAMC,QAAQ,qDAoDAtC,MAAOA,MAIb,yBACEuB,MAAM,6CACNF,MAAO,CACLO,QAAS,OACTW,WAAY,SACZV,eAAgB,WAGjB,IACD,6BACE,kBAAC,IAAD,CAAmB7B,MAAOA,Y,oBC5F5CwC,EAAOC,QAAU,IAA0B,yC,mICG5B,SAASC,IAAc,IAAD,EACH3C,oBAAS,GADN,mBAC5B4C,EAD4B,KAClBC,EADkB,KAEnCrC,oBAAU,KACRsC,OAAOC,iBAAiB,SAAUC,IACjC,IACH,IAAMA,EAAmB,KACnBF,OAAOG,SAAW,IACpBJ,GAAY,GAEZA,GAAY,IAGhB,OACE,6BACE,yBACErB,MACGoB,EAEG,8DADA,gDAGNM,GAAG,WAEH,yBAAK1B,MAAM,aACT,uBAAGA,MAAM,iCAAiC2B,KAAI,KAC5C,yBAAKC,IAAKC,EAAQ,KAA8BC,IAAI,MAEtD,4BACE9B,MAAM,sCACNC,KAAK,SACL8B,cAAY,WACZC,cAAY,oBACZC,gBAAc,mBACdC,gBAAc,QACdC,aAAW,qBAPb,OAUE,uBAAGnC,MAAM,sBAEX,yBAAKA,MAAM,2BAA2B0B,GAAG,oBACvC,wBAAI1B,MAAM,qCACR,wBAAIA,MAAM,YACR,uBAAGA,MAAM,6BAA6B2B,KAAI,YAA1C,iB","file":"static/js/58.8903c9fa.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SlidePuzzle from \"../SlidePuzzle/SlidePuzzle\";\r\nimport SlidePuzzleAnswer from \"../SlidePuzzle/SlidePuzzleAnswer\";\r\nimport firebase from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"./LiveSlidePuzzle.css\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport LiveNavBar from \"../NavBars/LiveNavBar\";\r\nfunction LiveAnimatedFramePage({ match }) {\r\n  const [fbimg, setfbimg] = useState(\"\");\r\n  const [loading, setloading] = useState(true);\r\n  const [bestscore, setbestscore] = useState();\r\n  const [puzzlescore, setpuzzlescore] = useState(0);\r\n  const handlepuzzlescore = (e) => {\r\n    setpuzzlescore(e);\r\n    if (e < bestscore) {\r\n      const todoRef = firebase\r\n        .database()\r\n        .ref(\"SlidePuzzle\")\r\n        .child(match.params.slug);\r\n      const todo = {\r\n        url: fbimg,\r\n        best_score: e,\r\n      };\r\n      var newKey = todoRef.update(todo);\r\n      setbestscore(e);\r\n      toast.success(\"You bet your previous best score, Keep playing!\");\r\n    }\r\n  };\r\n  useEffect(async () => {\r\n    setloading(true);\r\n    const todoRef = await firebase\r\n      .database()\r\n      .ref(\"/SlidePuzzle/\" + match.params.slug)\r\n      .once(\"value\")\r\n      .then((snapshot) => {\r\n        var img = snapshot.val().url;\r\n        setfbimg(img);\r\n        var bestscore = snapshot.val().best_score;\r\n        setbestscore(bestscore);\r\n      });\r\n\r\n    setloading(false);\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#ffffff\" }}>\r\n      <LiveNavBar />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <div class=\"container-fluid pt-3\">\r\n        {loading ? (\r\n          <Loader\r\n            type=\"BallTriangle\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n          />\r\n        ) : (\r\n          <center>\r\n            {bestscore != 100000 && (\r\n              <center>\r\n                <h2>Best Score: {bestscore}</h2>\r\n              </center>\r\n            )}\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-6 mb-xs-0 mb-sm-5 mt-5\">\r\n                {\" \"}\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    margin: \"auto\",\r\n                  }}\r\n                >\r\n                  <SlidePuzzle\r\n                    handlepuzzlescore={handlepuzzlescore}\r\n                    fbimg={fbimg}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div\r\n                class=\"col-lg-6 mb-5 mb-xl-3 mt-0 mt-sm-3 mt-md-0\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                {\" \"}\r\n                <div>\r\n                  <SlidePuzzleAnswer fbimg={fbimg} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </center>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiveAnimatedFramePage;\r\n","module.exports = __webpack_public_path__ + \"static/media/navbar-logo.2c061749.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport \"./NavBar.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nexport default function LiveNavBar() {\r\n  const [navstate, setnavstate] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", changeBackground);\r\n  }, []);\r\n  const changeBackground = () => {\r\n    if (window.scrollY >= 100) {\r\n      setnavstate(true);\r\n    } else {\r\n      setnavstate(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <nav\r\n        class={\r\n          !navstate\r\n            ? \"navbar navbar-expand-lg navbar-dark fixed-top\"\r\n            : \"navbar navbar-expand-lg navbar-dark fixed-top navbar-shrink\"\r\n        }\r\n        id=\"mainNav\"\r\n      >\r\n        <div class=\"container\">\r\n          <a class=\"navbar-brand js-scroll-trigger\" href={`/`}>\r\n            <img src={require(\"../Images/navbar-logo.svg\")} alt=\"\" />\r\n          </a>\r\n          <button\r\n            class=\"navbar-toggler navbar-toggler-right\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarResponsive\"\r\n            aria-controls=\"navbarResponsive\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            Menu\r\n            <i class=\"fas fa-bars ml-1\"></i>\r\n          </button>\r\n          <div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n            <ul class=\"navbar-nav text-uppercase ml-auto\">\r\n              <li class=\"nav-item\">\r\n                <a class=\"nav-link js-scroll-trigger\" href={`/aboutus`}>\r\n                  ABOUT\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}